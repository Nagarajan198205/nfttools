@layout LoginLayout
@page "/account/login"
@inject NFTIntegration.Classes.IAlertService AlertService
@inject NFTIntegration.Classes.IAccountService AccountService
@inject NavigationManager NavigationManager
@using NFTIntegration.Classes

<div class="element-center">
    <div>
        <Alert />
    </div>    
    <div class="shadow-lg">
        <div class="card login-page">
            <h4 class="card-header">Login</h4>
            <div class="card-body">
                <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>Username</label>
                        <InputText @bind-Value="model.Username" class="form-control" />
                        <ValidationMessage For="@(() => model.Username)" />
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <InputText @bind-Value="model.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => model.Password)" />
                    </div>
                    <button disabled="@loading" class="btn btn-primary">
                        @if (loading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>}
                        Login
                    </button>
                    <NavLink href="account/register" class="btn btn-link">Register</NavLink>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code { private Models.Account.Login model = new Models.Account.Login();
    private bool loading;

    private async void OnValidSubmit()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
            var user = await Task.Run(() => AccountService.Login(model));

            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";

            if (string.IsNullOrEmpty(returnUrl) && user.UserId != 0)
            {
                returnUrl = "/apps/dashboard";
                NavigationManager.NavigateTo(returnUrl);
            }
            else
            {
                AlertService.Alert(new Models.Account.Alert { Message = "Invalid username or password", AutoClose = false, KeepAfterRouteChange = false, Type = Models.Account.AlertType.Error });
                loading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
            AlertService.Clear();
        }
    } }