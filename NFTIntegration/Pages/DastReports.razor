@page "/DastReports"
@inject NavigationManager navigationManager
@inject IJSRuntime jsRunTime
@inherits Classes.ZapBase

@using Data;
@using Classes

<div class="float-lg-right">
    <button class="btn" @onclick="CaptureScreenShot"><i class="oi oi-camera-slr"></i></button>
</div>

<h2>Vulnerable reports</h2>
<div class="center">
    <h3>Latest vulnerable report summary</h3>
</div>
<div id="chartdiv"></div>


@if (zapReportData.Count > 0)
{
    <div class="table-responsive-xl">
        <table class="table table-bordered table-striped mb-0">
            <thead class="bg-info">
                <tr>
                    <th scope="col" class="col-header">Run Date</th>
                    <th scope="col" class="risk-high">High</th>
                    <th scope="col" class="risk-medium">Medium</th>
                    <th scope="col" class="risk-low">Low</th>
                    <th scope="col" class="risk-info">Informational</th>
                    <th scope="col" class="col-header">View Report</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in zapReportData)
                {
                    <tr>
                        <th>@item.RunDate</th>
                        <td>@item.High</td>
                        <td>@item.Medium</td>
                        <td>@item.Low</td>
                        <td>@item.Information</td>
                        <td>
                            <a href="/DastReports" @onclick="@(() => NavigateToUrl(@item))">View</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="center">
        <h3>No reports available!</h3>
    </div>
}


@code{

    [Parameter]
    public List<ReportData> zapReportData { get; set; } = new DataAdapter().GetZapReportList();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var zapAlerts = new ZapAlerts().GetZapAlerts();
                await jsRunTime.InvokeVoidAsync("generateChartInValues", zapAlerts).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.StackTrace.ToString());
            }
        }
    }

    public void NavigateToUrl(ReportData reportData)
    {
        string url = $"/ViewDastReport?reportid={reportData.ReportId}";
        jsRunTime.InvokeVoidAsync("open", url,"_blank").ConfigureAwait(false);
    }

}

@functions {
    private void CaptureScreenShot()
    {
        FileUtil.SaveAs(jsRunTime, $"Dast_{DateTime.Now.ToString("ddMMyyyyHHmmss")}.jpg").ConfigureAwait(false);
    }
}