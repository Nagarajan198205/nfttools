@layout MainLayout
@page "/apps/dashboard"
@inject NavigationManager navigationManager
@inject IJSRuntime jsRunTime
@inject IAccountService AccountService
@inject IAppsService AppsService
@inject NavigationManager NavigationManager
@using Classes
@using Data

<h2>Dashboard</h2>
<div class="center">
    <h3>Vulnerable report summary</h3>
</div>
<div id="chartdiv" style="height: 300px;"></div>
<br />
<div class="center">
    <h3>Vulnerable issues by project </h3>
</div>
<div id="barChartDiv" style="height: 300px;"></div>

<br />

@if (ReportDataList?.Count > 0)
{
    <div class="table-responsive-xl">
        <table class="table table-bordered table-striped mb-0">
            <thead class="bg-info">
                <tr>
                    <th scope="col" class="col-header">Project</th>
                    <th scope="col" class="risk-high">High</th>
                    <th scope="col" class="risk-medium">Medium</th>
                    <th scope="col" class="risk-low">Low</th>
                    <th scope="col" class="risk-info">Informational</th>
                    <th scope="col" class="col-header">View Report</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ReportDataList)
                {
                    <tr>
                        <th>@item.ProjectName</th>
                        <td>@item.High</td>
                        <td>@item.Medium</td>
                        <td>@item.Low</td>
                        <td>@item.Information</td>
                        <td>
                            <a href="apps/ViewDastProjectWiseReport?projectId=@item.ProjectId" target="_blank">View</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="center">
        <h3>No report(s) available!</h3>
    </div>
}
<div class="mt-5"></div>

@code{

    [Parameter]
    public List<ReportData> ReportDataList { get; set; } = new List<ReportData>();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var userDetails = AccountService.User;
                var zapAlerts = await AppsService.GetZapAlerts(userDetails);
                var issueList = await AppsService.GetIssuesCountByProject(userDetails);
                await jsRunTime.InvokeVoidAsync("generateChartInValues", zapAlerts);
                await jsRunTime.InvokeVoidAsync("generateBarChart", issueList);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.StackTrace.ToString());
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userDetails = AccountService.User;

            if (userDetails == null || (userDetails != null && userDetails.UserId == 0))
            {
                NavigationManager.NavigateTo("/account/login");
            }

            ReportDataList = await AppsService.GetDastReportList(userDetails);

        }
        catch (Exception e) { Console.WriteLine(e.StackTrace.ToString()); }
    }
}