@layout MainLayout
@page "/apps/dastReports"
@inject NavigationManager navigationManager
@inject NFTIntegration.Classes.ILocalStorageService LocalStorageService
@inject NFTIntegration.Classes.IAppsService AppsService
@inject IJSRuntime jsRunTime
@inherits Classes.DastBase

@using Data


<h2>Vulnerable reports</h2>
<div class="center">
    <h3>Latest vulnerable report summary</h3>
</div>
<div id="chartdiv"></div>


@if (zapReportData?.Count > 0)
{
    <div class="table-responsive-xl">
        <table class="table table-bordered table-striped mb-0">
            <thead class="bg-info">
                <tr>
                    <th scope="col" class="col-header">Run Date</th>
                    <th scope="col" class="risk-high">High</th>
                    <th scope="col" class="risk-medium">Medium</th>
                    <th scope="col" class="risk-low">Low</th>
                    <th scope="col" class="risk-info">Informational</th>
                    <th scope="col" class="col-header">View Report</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in zapReportData)
                {
                    <tr>
                        <th>@item.RunDate</th>
                        <td>@item.High</td>
                        <td>@item.Medium</td>
                        <td>@item.Low</td>
                        <td>@item.Information</td>
                        <td>
                            <a href="apps/viewdastreport?reportid=@item.ReportId" target="_blank">View</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="center">
        <h3>No report(s) available!</h3>
    </div>
}


@code{

    [Parameter]
    public List<ReportData> zapReportData { get; set; } = new List<ReportData>();

    protected override async Task OnInitializedAsync()
    {
        var user = await LocalStorageService.GetItem<NFTIntegration.Models.Account.User>("user");
        zapReportData = await AppsService.GetZapReportList(user);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try
            {
                var user = await LocalStorageService.GetItem<NFTIntegration.Models.Account.User>("user");
                var zapAlerts = await AppsService.GetZapAlerts(user);
                await jsRunTime.InvokeVoidAsync("generateChartInValues", zapAlerts).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.StackTrace.ToString());
            }
        }
    }
}